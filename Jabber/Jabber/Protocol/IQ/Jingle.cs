/* --------------------------------------------------------------------------
 * Copyrights
 *
 * Portions created by or assigned to Sébastien Gissinger
 *
 * License
 *
 * Jabber-Net is licensed under the LGPL.
 * See LICENSE.txt for details.
 * --------------------------------------------------------------------------*/

using System;
using System.Collections.Generic;
using System.Text;
using System.Xml;
using Jabber.Protocol.Client;
using System.Diagnostics;

namespace Jabber.Protocol.IQ
{
    /// <summary>
    /// IQ packet with a jingle query element inside.
    /// </summary>
    public class JingleIQ : TypedIQ<Jingle>
    {
        /// <summary>
        /// Create a ping IQ
        /// </summary>
        /// <param name="doc"></param>
        public JingleIQ(XmlDocument doc)
            : base(doc)
        { }
    }

    /// <summary>
    /// A jingle query element.
    /// </summary>
    public class Jingle : Element
    {
        /// <summary>
        ///
        /// </summary>
        /// <param name="doc"></param>
        public Jingle(XmlDocument doc)
            : base("jingle", URI.JINGLE, doc)
        { }

        /// <summary>
        ///
        /// </summary>
        /// <param name="prefix"></param>
        /// <param name="qname"></param>
        /// <param name="doc"></param>
        public Jingle(string prefix, XmlQualifiedName qname, XmlDocument doc) :
            base(prefix, qname, doc)
        { }

        /// <summary>
        /// The full JID of the entity that has initiated the session flow.
        /// When the Jingle action is "session-initiate", the <jingle/> element
        /// SHOULD possess an 'initiator' attribute that explicitly specifies
        /// the full JID of the initiating entity;
        /// For all other actions, the <jingle/> element SHOULD NOT possess
        /// an 'initiator' attribute and the recipient of the message
        /// SHOULD ignore the value if provided
        /// </summary>
        public String Initiator
        {
            get { return GetAttr("initiator"); }
            set { SetAttr("initiator", value); }
        }

        /// <summary>
        /// The full JID of the entity that has replied to the initiation, which 
        /// can be different from the 'to' address on the IQ-set. 
        /// When the Jingle action is "session-accept", the <jingle/> element
        /// SHOULD possess a 'responder' attribute that explicitly specifies 
        /// the full JID of the responding entity; 
        /// For all other actions, the <jingle/> element SHOULD NOT possess
        /// a 'responder' attribute and the recipient of the message
        /// SHOULD ignore the value if provided
        /// </summary>
        public String Responder
        {
            get { return GetAttr("responder"); }
            set { SetAttr("responder", value); }
        }

        /// <summary>
        /// A random session identifier generated by the initiator,
        /// which effectively maps to the local-part of a SIP "Call-ID" parameter
        /// </summary>
        public String Sid
        {
            get { return GetAttr("sid"); }
            set { SetAttr("sid", value); }
        }

        /// <summary>
        /// The jingle action
        /// </summary>
        public ActionType Action
        {
            get { return GetEnumAttr<ActionType>("action"); }
            set { SetEnumAttr("action", value); }
        }

        /// <summary>
        /// Machine-readable information about the condition that prompted the action.
        /// </summary>
        public JingleReason Reason
        {
            get { return GetChildElement<JingleReason>(); }
            set { ReplaceChild<JingleReason>(value); }
        }

        /// <summary>
        /// Retrieve all of the contents
        /// </summary>
        /// <returns></returns>
        public JingleContent[] GetContents()
        {
            return GetElements<JingleContent>().ToArray();
        }

        /// <summary>
        /// Add a new content to the list
        /// </summary>
        /// <param name="name"></param>
        /// <param name="creator"></param>
        /// <param name="disposition"></param>
        /// <param name="senders"></param>
        /// <returns></returns>
        public JingleContent AddContent(String name, CreatorType creator, MailContentDisposition disposition, SendersType senders)
        {
            Debug.Assert(!String.IsNullOrEmpty(name));

            JingleContent jcnt = CreateChildElement<JingleContent>();

            jcnt.JingleName  = name;
            jcnt.Creator     = creator == null     ? CreatorType.initiator          : creator;
            jcnt.Disposition = disposition == null ? MailContentDisposition.session : disposition;
            jcnt.Senders     = senders == null     ? SendersType.both               : senders;

            return jcnt;
        }
    }

    /// <summary>
    /// Types of actions. This enum doesn't exactly match the XEP,
    /// since most of the field types aren't valid identifiers in C#.
    /// </summary>
    [Dash]
    public enum ActionType
    {
        /// <summary>
        /// None specified
        /// </summary>
        UNSPECIFIED = -1,
        /// <summary>
        /// The content-accept action is used to accept a content-add action received from another party
        /// </summary>
        content_accept,
        /// <summary>
        /// The content-add action is used to add one or more new content definitions to the session
        /// </summary>
        content_add,
        /// <summary>
        /// The content-modify action is used to change the direction of an existing content definition
        /// through modification of the 'senders' attribute
        /// </summary>
        content_modify,
        /// <summary>
        /// The content-reject action is used to reject a content-add action received from another party
        /// </summary>
        content_reject,
        /// <summary>
        /// The content-remove action is used to remove one or more content definitions from the session
        /// </summary>
        content_remove,
        /// <summary>
        /// The description-info action is used to send informational hints about parameters related to
        /// the application type, such as the suggested height and width of a video display area or
        /// suggested configuration for an audio stream
        /// </summary>
        description_info,
        /// <summary>
        /// The security-info action is used to send information related to establishment or 
        /// maintenance of security preconditions
        /// </summary>
        security_info,
        /// <summary>
        /// The session-accept action is used to definitively accept a session negotiation
        /// (implicitly this action also serves as a content-accept)
        /// </summary>
        session_accept,
        /// <summary>
        /// The session-info action is used to send session-level information, such as a 
        /// session ping or (for Jingle RTP sessions) a ringing message.
        /// </summary>
        session_info,
        /// <summary>
        /// The session-initiate action is used to request negotiation of a new Jingle session
        /// </summary>
        session_initiate,
        /// <summary>
        /// The session-terminate action is used to end an existing session
        /// </summary>
        session_terminate,
        /// <summary>
        /// The transport-accept action is used to accept a transport-replace action
        /// received from another party
        /// </summary>
        transport_accept,
        /// <summary>
        /// The transport-info action is used to exchange transport candidates;
        /// it is mainly used in Jingle ICE-UDP but might be used in other transport specifications.
        /// </summary>
        transport_info,
        /// <summary>
        /// The transport-reject action is used to reject a transport-replace action
        /// received from another party
        /// </summary>
        transport_reject,
        /// <summary>
        /// The transport-replace action is used to redefine a transport method, typically for
        /// fallback to a different method (e.g., changing from ICE-UDP to Raw UDP for a datagram 
        /// transport, or changing from SOCKS5 Bytestreams [26] to In-Band Bytestreams [27] for a streaming transport)
        /// </summary>
        transport_replace
    }
    
    /// <summary>
    /// Machine-readable information about the condition that prompted the action.
    /// </summary>
    public class JingleReason : Element
    {
        /// <summary>
        ///
        /// </summary>
        /// <param name="doc"></param>
        public JingleReason(XmlDocument doc)
            : base("reason", URI.JINGLE, doc)
        { }

        /// <summary>
        ///
        /// </summary>
        /// <param name="prefix"></param>
        /// <param name="qname"></param>
        /// <param name="doc"></param>
        public JingleReason(string prefix, XmlQualifiedName qname, XmlDocument doc) :
            base(prefix, qname, doc)
        { }
        
        /// <summary>
        /// Information about the condition that prompted the action.
        /// </summary>
        public AbstractJingleReason Reason
        {
            get { return GetChildElement<AbstractJingleReason>(); }
            set { ReplaceChild<AbstractJingleReason>(value); }
        }
    }


    /// <summary>
    /// Information about the condition that prompted the action.
    /// </summary>
    public abstract class AbstractJingleReason : Element
    {
        /// <summary>
        /// Create a reason type. Should not be called directly.
        /// </summary>
        /// <param name="prefix"></param>
        /// <param name="qname"></param>
        /// <param name="doc"></param>
        protected AbstractJingleReason(string prefix, XmlQualifiedName qname, XmlDocument doc)
            : base(prefix, qname, doc)
        { }

        /// <summary>
        /// Create for outbound, in the namespace of the parent element,
        /// then attach to the parent element.
        /// </summary>
        /// <param name="elementName">The name of the element to create</param>
        /// <param name="parent">The parent element</param>
        public AbstractJingleReason(string elementName, XmlElement parent)
            : base(elementName, parent.NamespaceURI, parent.OwnerDocument)
        {
            parent.AppendChild(this);
        }

        /// <summary>
        /// Create a reason type. Should not be called directly.
        /// </summary>
        /// <param name="prefix"></param>
        /// <param name="ns"></param>
        /// <param name="doc"></param>
        protected AbstractJingleReason(string prefix, string ns, XmlDocument doc)
            : base(prefix, ns, doc)
        { }

        /// <summary>
        /// What type of reason
        /// </summary>
        public abstract ReasonType ReasonType
        {
            get;
        }

        /// <summary>
        /// Human-readable information about the reason for the action
        /// </summary>
        public String Text
        {
            get { return GetElem("text"); }
            set { SetElem("text", value); }
        }
    }

    /// <summary>
    /// Machine-readable information about the condition that prompted the action.
    /// </summary>
    public enum ReasonType
    {
        /// <summary>
        /// The party prefers to use an existing session with the peer rather
        /// than initiate a new session; the Jingle session ID of the alternative
        /// session SHOULD be provided as the XML character data of the <sid/> child
        /// </summary>
        alternative_session,
        /// <summary>
        /// The party is busy and cannot accept a session
        /// </summary>
        busy,
        /// <summary>
        /// The initiator wishes to formally cancel the session initiation request
        /// </summary>
        cancel,
        /// <summary>
        /// The action is related to connectivity problems
        /// </summary>
        connectivity_error,
        /// <summary>
        /// The party wishes to formally decline the session
        /// </summary>
        decline,
        /// <summary>
        /// The session length has exceeded a pre-defined time limit
        /// (e.g., a meeting hosted at a conference service)
        /// </summary>
        expired,
        /// <summary>
        /// The party has been unable to initialize processing related to the application type
        /// </summary>
        failed_application,
        /// <summary>
        /// The party has been unable to establish connectivity for the transport method
        /// </summary>
        failed_transport,
        /// <summary>
        /// The action is related to a non-specific application error
        /// </summary>
        general_error,
        /// <summary>
        /// The entity is going offline or is no longer available
        /// </summary>
        gone,
        /// <summary>
        /// The party supports the offered application type but
        /// does not support the offered or negotiated parameters
        /// </summary>
        incompatible_parameters,
        /// <summary>
        /// The action is related to media processing problems
        /// </summary>
        media_error,
        /// <summary>
        /// The action is related to a violation of local security policies
        /// </summary>
        security_error,
        /// <summary>
        /// The action is generated during the normal course of state management
        /// and does not reflect any error
        /// </summary>
        success,
        /// <summary>
        /// A request has not been answered so the sender is timing out the request.
        /// </summary>
        timeout,
        /// <summary>
        /// The party supports none of the offered application types
        /// </summary>
        unsupported_applications,
        /// <summary>
        /// The party supports none of the offered transport methods
        /// </summary>
        unsupported_transports
    }

    /// <summary>
    /// Machine-readable information about the condition that prompted the action.
    /// </summary>
    public class JingleContent : Element
    {
        /// <summary>
        ///
        /// </summary>
        /// <param name="doc"></param>
        public JingleContent(XmlDocument doc)
            : base("content", URI.JINGLE, doc)
        { }

        /// <summary>
        ///
        /// </summary>
        /// <param name="prefix"></param>
        /// <param name="qname"></param>
        /// <param name="doc"></param>
        public JingleContent(string prefix, XmlQualifiedName qname, XmlDocument doc) :
            base(prefix, qname, doc)
        { }
        
        /// <summary>
        /// Which party originally generated the content type
        /// (used to prevent race conditions regarding modifications)
        /// </summary>
        public CreatorType Creator
        {
            get { return GetEnumAttr<CreatorType>("creator"); }
            set { SetEnumAttr("creator", value); }
        }

        /// <summary>
        /// How the content definition is to be interpreted by the recipient
        /// </summary>
        public MailContentDisposition Disposition
        {        
            get { return GetEnumAttr<MailContentDisposition>("disposition"); }
            set { SetEnumAttr("disposition", value); }
        }

        /// <summary>
        /// A unique name or identifier for the content type according to the creator,
        /// which MAY have meaning to a human user in order to differentiate
        /// this content type from other content types
        /// (e.g., two content types containing video media could differentiate
        ///  between "room-pan" and "slides")
        /// </summary>
        public String JingleName
        {
            get { return GetAttr("name"); }
            set { SetAttr("name", value); }
        }

        /// <summary>
        /// Which parties in the session will be generating content
        /// </summary>
        public SendersType Senders
        {
            get { return GetEnumAttr<SendersType>("senders"); }
            set { SetEnumAttr("senders", value); }
        }
    }

    /// <summary>
    /// Which party originally generated the content type
    /// (used to prevent race conditions regarding modifications)
    /// </summary>
    public enum CreatorType
    {
        /// <summary>
        /// None specified
        /// </summary>
        UNSPECIFIED = -1,
        /// <summary>
        /// The party who initiated jingle communication
        /// </summary>
        initiator,
        /// <summary>
        /// The party who received jingle communication
        /// </summary>
        responder
    }

    /// <summary>
    /// Which parties in the session will be generating content
    /// </summary>
    public enum SendersType
    {
        /// <summary>
        /// None specified
        /// </summary>
        UNSPECIFIED = -1,
        /// <summary>
        /// None of the parties
        /// </summary>
        none,
        /// <summary>
        /// Both parties
        /// </summary>
        both,
        /// <summary>
        /// The party who initiated jingle communication
        /// </summary>
        initiator,
        /// <summary>
        /// The party who received jingle communication
        /// </summary>
        responder
    }

    /// <summary>
    /// Matches the "Content-Disposition" header as defined in RFC 2183
    /// and applied to SIP by RFC 3261.
    /// The value of this attribute SHOULD be one of the values registered
    /// in the IANA Mail Content Disposition Values and Parameters Registry [30]
    /// </summary>
    [Dash]
    public enum MailContentDisposition
    {
        /// <summary>
        /// None specified
        /// </summary>
        UNSPECIFIED = -1,
        /// <summary>
        /// Displayed automatically
        /// </summary>
        inline,
        /// <summary>
        /// User controlled display
        /// </summary>
        attachment,
        /// <summary>
        /// Process as form response
        /// </summary>
        form_data,
        /// <summary>
        /// Tunneled content to be processed silently
        /// </summary>
        signal,
        /// <summary>
        /// The body is a custom ring tone to alert the user
        /// </summary>
        alert,
        /// <summary>
        /// The body is displayed as an icon to the user
        /// </summary>
        icon,
        /// <summary>
        /// The body should be displayed to the user
        /// </summary>
        render,
        /// <summary>
        /// The body contains a list of URIs that indicates the recipients of the request
        /// </summary>
        recipient_list_history,
        /// <summary>
        /// The body describes a communications session, for example, an RFC2327 SDP body
        /// </summary>
        session,
        /// <summary>
        /// Requested signature format for signed receipt
        /// </summary>
        signed_receipt_protocol,
        /// <summary>
        /// Requested signature algorithm for signed receipt
        /// </summary>
        signed_receipt_micalg,
        /// <summary>
        /// Authenticated Identity Body
        /// </summary>
        aib,
        /// <summary>
        /// The body describes an early communications session, for example, and [RFC2327] SDP body
        /// </summary>
        early_session,
        /// <summary>
        /// The body includes a list of URIs to which URI-list services are to be applied.
        /// </summary>
        recipient_list,
        /// <summary>
        /// the payload of the message carrying this Content-Disposition header
        /// field value is an Instant Message Disposition Notification as requested
        /// in the corresponding Instant Message.
        /// </summary>
        notification,
        /// <summary>
        /// The body needs to be handled according to a reference to the body that is
        /// located in the same SIP message as the body.
        /// </summary>
        by_reference,
        /// <summary>
        /// The body contains information associated with an Info Package
        /// </summary>
        info_package
    }
}